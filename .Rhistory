3	4	NA	-0.24	-0.59	NA	0.265	0.354	NA	2
3	4	NA	-0.73	-0.18	NA	0.335	0.442	NA	2
4	5	NA	-2.2	-2.5	NA	0.197	0.190	NA	2
4	5	NA	-1.8	-2.1	NA	0.200	0.250	NA	2'), header=TRUE)
# Convert the data, setting treatment names
data <- mtc.data.studyrow(data.src,
armVars=c('treatment'='t', 'mean'='y', 'std.err'='se'),
treatmentNames=c('Placebo', 'DA1', 'DA2', 'DA3', 'DA4'))
data.src
data.src <- read.table(textConnection('
r[,1] n[,1] r[,2] n[,2] r[,3] n[,3] t[,1] t[,2] t[,3] na[] # study ID
1472 20251 652 10396 723 10374 1 3 4 3 # 1
9 130 6 123 NA NA 1 2 NA 2 # 2
5 63 2 59 NA NA 1 2 NA 2 # 3
3 65 3 64 NA NA 1 2 NA 2 # 4
887 10396 929 10372 NA NA 1 2 NA 2 # 5
1455 13780 1418 13746 1448 13773 1 2 9 3 # 6
7 85 4 86 NA NA 1 2 NA 2 # 7
12 159 7 157 NA NA 1 2 NA 2 # 8
10 135 5 135 NA NA 1 2 NA 2 # 9
4 107 6 109 NA NA 1 4 NA 2 # 10
285 3004 270 3006 NA NA 1 5 NA 2 # 11
11 149 2 152 NA NA 1 7 NA 2 # 12
1 50 3 50 NA NA 1 7 NA 2 # 13
8 58 5 54 NA NA 1 7 NA 2 # 14
1 53 1 47 NA NA 1 7 NA 2 # 15
4 45 0 42 NA NA 1 7 NA 2 # 16
14 99 7 101 NA NA 1 7 NA 2 # 17
9 41 3 46 NA NA 1 7 NA 2 # 18
42 421 29 429 NA NA 1 7 NA 2 # 19
2 44 3 46 NA NA 2 7 NA 2 # 20
13 200 5 195 NA NA 2 7 NA 2 # 21
2 56 2 47 NA NA 2 7 NA 2 # 22
3 55 1 55 NA NA 3 7 NA 2 # 23
10 94 3 95 NA NA 3 7 NA 2 # 24
40 573 32 565 NA NA 3 7 NA 2 # 25
2 61 3 62 NA NA 3 7 NA 2 # 26
16 419 20 421 NA NA 3 7 NA 2 # 27
5 69 3 71 NA NA 3 7 NA 2 # 28
5 75 5 75 NA NA 3 7 NA 2 # 29
59 782 52 790 NA NA 3 7 NA 2 # 30
5 81 2 81 NA NA 3 7 NA 2 # 31
16 226 12 225 NA NA 3 7 NA 2 # 32
8 66 6 71 NA NA 3 7 NA 2 # 33
522 8488 523 8461 NA NA 3 6 NA 2 # 34
356 4921 757 10138 NA NA 3 5 NA 2 # 35
13 155 7 169 NA NA 3 5 NA 2 # 36
10 203 7 198 NA NA 1 8 NA 2 # 37
3 58 2 52 NA NA 1 9 NA 2 # 38
3 86 6 89 NA NA 1 9 NA 2 # 39
3 58 2 58 NA NA 1 9 NA 2 # 40
13 182 11 188 NA NA 1 9 NA 2 # 41
2 26 7 54 NA NA 3 8 NA 2 # 42
12 268 16 350 NA NA 3 8 NA 2 # 43
5 210 17 211 NA NA 3 9 NA 2 # 44
3 138 13 147 NA NA 3 9 NA 2 # 45
8 132 4 66 NA NA 2 8 NA 2 # 46
10 164 6 166 NA NA 2 8 NA 2 # 47
6 124 5 121 NA NA 2 8 NA 2 # 48
13 164 10 161 NA NA 2 9 NA 2 # 49
7 93 5 90 NA NA 2 9 NA 2 # 50
'), header = TRUE)
data.src
data <- mtc.data.studyrow(data.src, armVars = c('treatment'='t', 'responders' = 'r', 'sampleSize' = 'n'))
data
data.src <- read.table(textConnection('
r[,1] n[,1] r[,2] n[,2] r[,3] n[,3] t[,1] t[,2] t[,3] na[] # study ID
1472 20251 652 10396 723 10374 1 3 4 3 # 1
9 130 6 123 NA NA 1 2 NA 2 # 2
5 63 2 59 NA NA 1 2 NA 2 # 3
3 65 3 64 NA NA 1 2 NA 2 # 4
887 10396 929 10372 NA NA 1 2 NA 2 # 5
1455 13780 1418 13746 1448 13773 1 2 9 3 # 6
7 85 4 86 NA NA 1 2 NA 2 # 7
12 159 7 157 NA NA 1 2 NA 2 # 8
10 135 5 135 NA NA 1 2 NA 2 # 9
4 107 6 109 NA NA 1 4 NA 2 # 10
285 3004 270 3006 NA NA 1 5 NA 2 # 11
11 149 2 152 NA NA 1 7 NA 2 # 12
1 50 3 50 NA NA 1 7 NA 2 # 13
8 58 5 54 NA NA 1 7 NA 2 # 14
1 53 1 47 NA NA 1 7 NA 2 # 15
4 45 0 42 NA NA 1 7 NA 2 # 16
14 99 7 101 NA NA 1 7 NA 2 # 17
9 41 3 46 NA NA 1 7 NA 2 # 18
42 421 29 429 NA NA 1 7 NA 2 # 19
2 44 3 46 NA NA 2 7 NA 2 # 20
13 200 5 195 NA NA 2 7 NA 2 # 21
2 56 2 47 NA NA 2 7 NA 2 # 22
3 55 1 55 NA NA 3 7 NA 2 # 23
10 94 3 95 NA NA 3 7 NA 2 # 24
40 573 32 565 NA NA 3 7 NA 2 # 25
2 61 3 62 NA NA 3 7 NA 2 # 26
16 419 20 421 NA NA 3 7 NA 2 # 27
5 69 3 71 NA NA 3 7 NA 2 # 28
5 75 5 75 NA NA 3 7 NA 2 # 29
59 782 52 790 NA NA 3 7 NA 2 # 30
5 81 2 81 NA NA 3 7 NA 2 # 31
16 226 12 225 NA NA 3 7 NA 2 # 32
8 66 6 71 NA NA 3 7 NA 2 # 33
522 8488 523 8461 NA NA 3 6 NA 2 # 34
356 4921 757 10138 NA NA 3 5 NA 2 # 35
13 155 7 169 NA NA 3 5 NA 2 # 36
10 203 7 198 NA NA 1 8 NA 2 # 37
3 58 2 52 NA NA 1 9 NA 2 # 38
3 86 6 89 NA NA 1 9 NA 2 # 39
3 58 2 58 NA NA 1 9 NA 2 # 40
13 182 11 188 NA NA 1 9 NA 2 # 41
2 26 7 54 NA NA 3 8 NA 2 # 42
12 268 16 350 NA NA 3 8 NA 2 # 43
5 210 17 211 NA NA 3 9 NA 2 # 44
3 138 13 147 NA NA 3 9 NA 2 # 45
8 132 4 66 NA NA 2 8 NA 2 # 46
10 164 6 166 NA NA 2 8 NA 2 # 47
6 124 5 121 NA NA 2 8 NA 2 # 48
13 164 10 161 NA NA 2 9 NA 2 # 49
7 93 5 90 NA NA 2 9 NA 2 # 50
'), header = TRUE)
data <- mtc.data.studyrow(data.src, armVars = c('treatment'='t', 'responders' = 'r', 'sampleSize' = 'n'))
data
Outcomes <- data[,3]
N <- data[,4]
Treat <- data[,2]
Study <- data[,1]
thrombolytic <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat)
thrombolytic
library(gemtc)
thromboyltic
thrombolytic
thrombolytic
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
thrombolytic
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
thrombolytic
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, mean.d = 0.01, prec.d = 0.1)
})
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
Outcomes <- thrombolytic$Outcomes
Study <- thrombolytic$Study
Treat <- thrombolytic$Treat
N <- thrombolytic$N
na <- rle(Study)$lengths
if(any(na == 1)) stop("study cannot have only 1 arm or arms have to be next to each other in each study")
nstudy <- length(unique(Study))
ntreat <- unique(as.vector(Treat))
ntreat <- length(ntreat[!is.na(ntreat)])
ends <- cumsum(na) # End row of trials
starts <- c(1, ends[-length(ends)] + 1) # Start row of trials
b.Treat <- rep(NA, length(na))
b.id <- rep(F, sum(na))
for (i in 1:length(na)){
limits <- starts[i]:ends[i]
b.Treat[i] <- min(Treat[limits])
b.id[limits[b.Treat[i] == Treat[limits]]] <- T
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
make.byStudy.Outcome = function(Outcomes, Study, nstudy, na){
r = structure(.Data = rep(NA, nstudy*max(na)* dim(Outcomes)[2]), .Dim = c(nstudy, max(na), dim(Outcomes)[2]))
arms_index = NULL
for(i in 1:length(na)){
arms_index = c(arms_index, seq(na[i]))
}
for(i in 1:dim(Outcomes)[1]){
r[Study[i],arms_index[i],] = Outcomes[i,]
}
return(r)
}
make.byStudy.matrix = function(Treat, Study){
#make the by-arms vector into a by-study matrix
nstudy = length(unique(Study))
na = rle(Study)$lengths
Study = rep(1:nstudy, times = na)
t = matrix(NA, nrow = nstudy, ncol = max(na))
arms_index = NULL
for(i in 1:length(na)){
arms_index = c(arms_index, seq(na[i]))
}
for(i in 1:length(Treat)){
t[Study[i], arms_index[i]] = Treat[i]
}
return(t)
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
response = "binomial"
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
Outcomes
Study
nstudy
na
length(na)
make.byStudy.Outcome()
make.byStudy.Outcome
Outcomes
Outcomes <- as.matrix(Outcomes)
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
r
Outcomes
make.byStudy.Outcome
source('C:/Users/mike/Desktop/Github/network-meta/R/ume.network.R', echo=TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
source('C:/Users/mike/Desktop/diff_data_trial2.R', echo=TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network
str(network)
ume.network.rjags <- function(network){
with(network, {
code <- paste0("model\n{",
"\n\tfor(i in 1:", nstudy, ") {",
"\n\t\tdelta[i,1] <- 0",
"\n\t\tmu[i] ~ dnorm(0,.0001)",
"\n\t\tfor(k in 1:na[i]) {",
"\n\t\t\tr[i,k] ~ dbin(p[i,k], n[i,k])",
"\n\t\t\tlogit(p[i,k]) <- mu[i] + delta[i,k]",
"\n\t\t\trhat[i,k] <- p[i,k] * n[i,k]",
"\n\t\t\tdev[i,k] <- 2 * (r[i,k] * (log(r[i,k])- log(rhat[i,k])) + (n[i,k] - r[i,k]) * (log(n[i,k] - r[i,k]) - log(n[i,k] - rhat[i,k])))",
"\n\t\t}",
"\n\t\tfor (k in 2:na[i]) {",
"\n\t\t\tdelta[i,k] ~ dnorm(md[i,k], taud[i,k])",
"\n\t\t\tmd[i,k] <- d[t[i,k]] - d[t[i,1]] + sw[i,k]",
"\n\t\t\ttaud[i,k] <- tau * 2 * (k-1) / k",
"\n\t\t\tw[i,k] <- (delta[i,k] - d[t[i,k]] + d[t[i,1]])",
"\n\t\t\tsw[i,k] <- sum(w[i,1:(k-1)])/ (k-1)",
"\n\t\t}",
"\n\t}",
"\n\ttotresdev <- sum(resdev[])",
"\n\td[1] <- 0",
"\n\tfor (k in 2:", ntreat, "){",
"\n\t\td[k] ~ dnorm(mean.d, prec.d)",
"\n\t\tsd ~ dunif(0,5)",
"\n\t\ttau <- pow(sd, -2)",
"\n\t}")
return(code)
})
}
code <- ume.network.rjags(network)
code
cat(code)
ume.network.rjags <- function(network){
with(network, {
code <- paste0("model\n{",
"\n\tfor(i in 1:", nstudy, ") {",
"\n\t\tdelta[i,1] <- 0",
"\n\t\tmu[i] ~ dnorm(0,.0001)",
"\n\t\tfor(k in 1:na[i]) {",
"\n\t\t\tr[i,k] ~ dbin(p[i,k], n[i,k])",
"\n\t\t\tlogit(p[i,k]) <- mu[i] + delta[i,k]",
"\n\t\t\trhat[i,k] <- p[i,k] * n[i,k]",
"\n\t\t\tdev[i,k] <- 2 * (r[i,k] * (log(r[i,k])- log(rhat[i,k])) + (n[i,k] - r[i,k]) * (log(n[i,k] - r[i,k]) - log(n[i,k] - rhat[i,k])))",
"\n\t\t}",
"\n\t\tfor (k in 2:na[i]) {",
"\n\t\t\tdelta[i,k] ~ dnorm(md[i,k], taud[i,k])",
"\n\t\t\tmd[i,k] <- d[t[i,k]] - d[t[i,1]] + sw[i,k]",
"\n\t\t\ttaud[i,k] <- tau * 2 * (k-1) / k",
"\n\t\t\tw[i,k] <- (delta[i,k] - d[t[i,k]] + d[t[i,1]])",
"\n\t\t\tsw[i,k] <- sum(w[i,1:(k-1)])/ (k-1)",
"\n\t\t}",
"\n\t}",
"\n\ttotresdev <- sum(resdev[])",
"\n\td[1] <- 0",
"\n\tfor (k in 2:", ntreat, "){",
"\n\t\td[k] ~ dnorm(mean.d, prec.d)",
"\n\t\tsd ~ dunif(0,5)",
"\n\t\ttau <- pow(sd, -2)",
"\n\t}",
"\n}")
return(code)
})
}
code <- ume.network.rjags(network)
cat(code)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
str(network)
network$r
network$t
network$nrow
str(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
cat(network$code)
str(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
devtools::document()
setwd("C:/Users/mike/Desktop/Github/network-meta")
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
str(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
network$mean.d
str(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
ume.network.rjags <- function(network){
with(network, {
code <- paste0("model\n{",
"\n\tfor(i in 1:", nstudy, ") {",
"\n\t\tdelta[i,1] <- 0",
"\n\t\tmu[i] ~ dnorm(0,.0001)",
"\n\t\tfor(k in 1:na[i]) {",
"\n\t\t\tr[i,k] ~ dbin(p[i,k], n[i,k])",
"\n\t\t\tlogit(p[i,k]) <- mu[i] + delta[i,k]",
"\n\t\t\trhat[i,k] <- p[i,k] * n[i,k]",
"\n\t\t\tdev[i,k] <- 2 * (r[i,k] * (log(r[i,k])- log(rhat[i,k])) + (n[i,k] - r[i,k]) * (log(n[i,k] - r[i,k]) - log(n[i,k] - rhat[i,k])))",
"\n\t\t}",
"\n\t\tfor (k in 2:na[i]) {",
"\n\t\t\tdelta[i,k] ~ dnorm(md[i,k], taud[i,k])",
"\n\t\t\tmd[i,k] <- d[t[i,k]] - d[t[i,1]] + sw[i,k]",
"\n\t\t\ttaud[i,k] <- tau * 2 * (k-1) / k",
"\n\t\t\tw[i,k] <- (delta[i,k] - d[t[i,k]] + d[t[i,1]])",
"\n\t\t\tsw[i,k] <- sum(w[i,1:(k-1)])/ (k-1)",
"\n\t\t}",
"\n\t}",
"\n\ttotresdev <- sum(resdev[])",
"\n\td[1] <- 0",
"\n\tfor (k in 2:", ntreat, "){",
"\n\t\td[k] ~ dnorm(0, 0.001)", #mean.d, prec.d
"\n\t\tsd ~ dunif(0,5)",
"\n\t\ttau <- pow(sd, -2)",
"\n\t}",
"\n}")
return(code)
})
}
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
ume.network.rjags
ume.network.rjags <- function(network){
with(network, {
code <- paste0("model\n{",
"\n\tfor(i in 1:", nstudy, ") {",
"\n\t\tdelta[i,1] <- 0",
"\n\t\tmu[i] ~ dnorm(0,.0001)",
"\n\t\tfor(k in 1:na[i]) {",
"\n\t\t\tr[i,k] ~ dbin(p[i,k], n[i,k])",
"\n\t\t\tlogit(p[i,k]) <- mu[i] + delta[i,k]",
"\n\t\t\trhat[i,k] <- p[i,k] * n[i,k]",
"\n\t\t\tdev[i,k] <- 2 * (r[i,k] * (log(r[i,k])- log(rhat[i,k])) + (n[i,k] - r[i,k]) * (log(n[i,k] - r[i,k]) - log(n[i,k] - rhat[i,k])))",
"\n\t\t}",
"\n\t\tfor (k in 2:na[i]) {",
"\n\t\t\tdelta[i,k] ~ dnorm(md[i,k], taud[i,k])",
"\n\t\t\tmd[i,k] <- d[t[i,k]] - d[t[i,1]] + sw[i,k]",
"\n\t\t\ttaud[i,k] <- tau * 2 * (k-1) / k",
"\n\t\t\tw[i,k] <- (delta[i,k] - d[t[i,k]] + d[t[i,1]])",
"\n\t\t\tsw[i,k] <- sum(w[i,1:(k-1)])/ (k-1)",
"\n\t\t}",
"\n\t}",
"\n\ttotresdev <- sum(resdev[])",
"\n\td[1] <- 0",
"\n\tfor (k in 2:", ntreat, "){",
"\n\t\td[k] ~ dnorm(0, 0.001)",
"\n\t\tsd ~ dunif(0,5)",
"\n\t\ttau <- pow(sd, -2)",
"\n\t}",
"\n}")
return(code)
})
}
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
ume.network.rjags()
ume.network.rjags
