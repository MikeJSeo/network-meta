install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
thrombolytic
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, mean.d = 0.01, prec.d = 0.1)
})
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
Outcomes <- thrombolytic$Outcomes
Study <- thrombolytic$Study
Treat <- thrombolytic$Treat
N <- thrombolytic$N
na <- rle(Study)$lengths
if(any(na == 1)) stop("study cannot have only 1 arm or arms have to be next to each other in each study")
nstudy <- length(unique(Study))
ntreat <- unique(as.vector(Treat))
ntreat <- length(ntreat[!is.na(ntreat)])
ends <- cumsum(na) # End row of trials
starts <- c(1, ends[-length(ends)] + 1) # Start row of trials
b.Treat <- rep(NA, length(na))
b.id <- rep(F, sum(na))
for (i in 1:length(na)){
limits <- starts[i]:ends[i]
b.Treat[i] <- min(Treat[limits])
b.id[limits[b.Treat[i] == Treat[limits]]] <- T
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
make.byStudy.Outcome = function(Outcomes, Study, nstudy, na){
r = structure(.Data = rep(NA, nstudy*max(na)* dim(Outcomes)[2]), .Dim = c(nstudy, max(na), dim(Outcomes)[2]))
arms_index = NULL
for(i in 1:length(na)){
arms_index = c(arms_index, seq(na[i]))
}
for(i in 1:dim(Outcomes)[1]){
r[Study[i],arms_index[i],] = Outcomes[i,]
}
return(r)
}
make.byStudy.matrix = function(Treat, Study){
#make the by-arms vector into a by-study matrix
nstudy = length(unique(Study))
na = rle(Study)$lengths
Study = rep(1:nstudy, times = na)
t = matrix(NA, nrow = nstudy, ncol = max(na))
arms_index = NULL
for(i in 1:length(na)){
arms_index = c(arms_index, seq(na[i]))
}
for(i in 1:length(Treat)){
t[Study[i], arms_index[i]] = Treat[i]
}
return(t)
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
response = "binomial"
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
Outcomes
Study
nstudy
na
length(na)
make.byStudy.Outcome()
make.byStudy.Outcome
Outcomes
Outcomes <- as.matrix(Outcomes)
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
r
Outcomes
make.byStudy.Outcome
source('C:/Users/mike/Desktop/Github/network-meta/R/ume.network.R', echo=TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
source('C:/Users/mike/Desktop/diff_data_trial2.R', echo=TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network$na
network$n
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network$Outcomes
thrombolytic$Outcomes
network$r
network$r
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network
cat(network$code)
str(network)
network$r
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
parkinsons_contrast
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Outcomes <- c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, -0.9)
Treat <- c(1, 3, 1, 2, 3, 4, 3, 4, 4, 5, 4, 5, 1, 2, 4)
SE <- c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, 0.69)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
na
nstudy <- length(na)
mat <- matrix(NA, nstudy, max(na))
Study <- rep(1:nstudy, na)
arms_index <- NULL
for(i in 1:length(na)){
arms_index <- c(arms_index, seq(na[i]))
}
arms_index
for(i in 1:length(vec)){
mat[Study[i], arms_index[i]] <- vec[i]
}
mat
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
alzheimers.treat
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
alz.remodel <- rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="REML",digits=3, slab=seq(5))
alz.remodel
predict(alz.remodel)
par.limits = function(x)
{
quantile(x,c(.025,.5,.975)
}
post.prob = function(x)
{
sum(x<0)/length(x)
}
random.results=function(network)
{
result = contrast.network.run(network)
samples = rbind(result$samples[[1]],result$samples[[2]],result$samples[[3]])
mcmc.samples=mcmc(samples)
delta.names = paste("delta[",seq(5),",2]",sep="")
delta = samples[,delta.names]
dimnames(delta) = list(NULL, seq(5))
#Population treatment effect
d = samples[,"d[2]"]
d.quantiles = par.limits(d)
print(round(d.quantiles,1))
print(post.prob(d))
#  print(summary(d))
print(result$deviance)
study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
alz.remodel <- rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="REML",digits=3, slab=seq(5))
alz.remodel
predict(alz.remodel)
par.limits = function(x)
{
quantile(x,c(.025,.5,.975))
}
post.prob = function(x)
{
sum(x<0)/length(x)
}
random.results=function(network)
{
result = contrast.network.run(network)
samples = rbind(result$samples[[1]],result$samples[[2]],result$samples[[3]])
mcmc.samples=mcmc(samples)
delta.names = paste("delta[",seq(5),",2]",sep="")
delta = samples[,delta.names]
dimnames(delta) = list(NULL, seq(5))
#Population treatment effect
d = samples[,"d[2]"]
d.quantiles = par.limits(d)
print(round(d.quantiles,1))
print(post.prob(d))
#  print(summary(d))
print(result$deviance)
study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
alzheimers.treat
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = random.results(random.noninf.unif)
library(coda) #for function mcmc
result = random.results(random.noninf.unif)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE= alzheimers.si, na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
contrast.network.run(random.noninf.unif)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE= alzheimers.si, na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE= alzheimers.si, na=rep(2,5), type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.results(random.noninf.unif)
random.noninf.gamma = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE= alzheimers.si, na=rep(2,5), type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dgamma",0.001,0.001))
random.results(random.noninf.gamma)
random.inf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE=alzheimers.si,na=rep(2,5), type = "random", mean.d = -5, prec.d = 0.25,
hy.prior = list("dunif",0,100))
random.results(random.inf.unif)
random.inf.gamma = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE= alzheimers.si,na=rep(2,5), type = "random", mean.d = -5, prec.d = 0.25,
hy.prior = list("dgamma",0.001,0.001))
random.results(random.inf.gamma)
devtools::document()
setwd("C:/Users/mike/Desktop/Github/network-meta")
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
