network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
parkinsons_contrast
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
Outcomes <- c(10, 18, 5, 8, 46, 61, 5, 16, 26, 37, 816, 866, 55, 109, 112, 130, 619, 692, 71, 81, 325, 345, 321, 325, 54, 77, 6, 6, 211, 136, 47, 47, 34, 39, 6, 27, 394, 406, 997, 1421)
N <- c(297, 308, 30, 44, 105, 108, 10, 17, 40, 38, 1060, 902, 71, 139, 138, 140, 737, 764, 82, 83, 375, 384, 363, 361, 56, 80, 12, 12, 211, 136, 56, 58, 38, 41, 50, 47, 469, 482, 1545, 1583)
Treat <- c(1, 2, 1, 5, 1, 3, 1, 4, 1, 4, 1, 7, 1, 2, 1, 7, 1, 5, 1, 3, 1, 2, 1, 4, 1, 2, 4, 6, 4, 6, 3, 4, 2, 3, 2, 5, 4, 6, 4, 7)
#Treat[Treat == 1] = "Treatment A"
#Treat[Treat == 2] = "Treatment B"
#Treat[Treat == 3] = "Hahaha Treatment"
#Treat[Treat == 4] = "Blah Blah Treatment"
Study <- rep(1:20, each = 2)
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common") #Model A1
result <- network.run(network, extra.pars.save = "delta")
summary(result, extra.pars = "delta")
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
summary(result)
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
summary(result)
summary(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
summary(result, extra.pars = "delta")
result
str(result$samples)
str(result$samples[[1]][2])
str(result$samples[[1]][[2]])
str(result$samples[[1]])
str(result$samples[[1]][2])
result$samples[[1]][2]
result$samples[[1]]
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network, n.run = 10000)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network, n.run = 100000)
summary(result)
summary(result, extra.pars = "delta")
summary(result, only.pars = "d")
summary(result, only.pars = "sd")
summary(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network, n.run = 100000)
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network, n.run = 100000)
summary(result)
calculate.deviance
network <- with(thrombolytic, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- network.run(network)
summarize(result)
summary(result)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- ume.network.run(network)
summary(result)
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
summary(result)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
Outcomes <- c(10, 18, 5, 8, 46, 61, 5, 16, 26, 37, 816, 866, 55, 109, 112, 130, 619, 692, 71, 81, 325, 345, 321, 325, 54, 77, 6, 6, 211, 136, 47, 47, 34, 39, 6, 27, 394, 406, 997, 1421)
N <- c(297, 308, 30, 44, 105, 108, 10, 17, 40, 38, 1060, 902, 71, 139, 138, 140, 737, 764, 82, 83, 375, 384, 363, 361, 56, 80, 12, 12, 211, 136, 56, 58, 38, 41, 50, 47, 469, 482, 1545, 1583)
Treat <- c(1, 2, 1, 5, 1, 3, 1, 4, 1, 4, 1, 7, 1, 2, 1, 7, 1, 5, 1, 3, 1, 2, 1, 4, 1, 2, 4, 6, 4, 6, 3, 4, 2, 3, 2, 5, 4, 6, 4, 7)
#Treat[Treat == 1] = "Treatment A"
#Treat[Treat == 2] = "Treatment B"
#Treat[Treat == 3] = "Hahaha Treatment"
#Treat[Treat == 4] = "Blah Blah Treatment"
Study <- rep(1:20, each = 2)
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial") #Model 0
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common") #Model A1
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common", baseline.risk = "exchangeable") #Model A2
result <- network.run(network, extra.pars.save = "delta")
result <- network.run(network)
summary(result)
summary(result, extra.pars = "delta")
network.forest.plot(result)
network.forest.plot(result)
network.forest.plot
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
dev <- lapply(samples, function(x) { x[,grep("dev\\[", dimnames(samples[[1]])[[2]])]})
dev <- do.call(rbind, dev)
dev <- apply(dev, 2, mean)
dev_matrix <- matrix(NA, nrow =  network$nstudy, ncol = max(network$na))
for(i in 1:dim(dev_matrix)[1]){
for(j in 1:dim(dev_matrix)[2]){
ind <- which(paste("dev[", i, ",", j, "]", sep = "") == names(dev))
if(length(ind) != 0){
dev_matrix[i,j] <- dev[ind]
}
}
}
dev_arm <- dev_matrix
ncat <- ifelse(result$network$response == "multinomial", result$network$ncat, 2)
for(i in 1:(ncat-1)){
if(i != 1) grid::grid.newpage()
if(result$network$response == "multinomial"){
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)[,,i]
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)[,,i]
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)[,,i]
} else{
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)
}
lower <- lower[upper.tri(lower)]
OR <- OR[upper.tri(OR)]
upper <- upper[upper.tri(upper)]
odds <- data.frame(lower = lower, OR = OR, upper = upper)
if(result$network$response %in% c("binomial", "multinomial")){
odds <- exp(odds) #report odds ratio instead of log odds ratio
}
Treat.order <- result$network$Treat.order
ts <- 1:length(Treat.order)
comps <- combn(ts, 2)
name <- rep(NA, ncol(comps))
for(j in 1:ncol(comps)){
name[j] <- paste0(Treat.order[comps[2,j]]," vs ", Treat.order[comps[1,j]])
}
odds$name <- name
if(is.null(ticks.position)){
if(result$network$response %in% c("binomial", "multinomial")){
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
} else if(result$network$response == "normal"){
ticks <- pretty(c(min(odds$lower, na.rm =TRUE), max(odds$upper, na.rm = TRUE)))
}
} else{
ticks <- ticks.position
}
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
xlim.range <- ggplot_build(p)$layout$panel_ranges[[1]]$x.range
p <- p + geom_text(aes(label = paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]")), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = 1:length(comps[1,]))   # hjust = -1, vjust = 2)
median_name_location <- ifelse(length(odds[,1]) <= 3, length(comps[1,]) + 0.5, length(comps[1,]) + 1)
p <- p + geom_text(aes(label = "Median [lower, upper]"), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = median_name_location)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid::grid.draw(gt)
}
level = 0.95
ticks.position = NULL
label.multiplier = 0.2
label.margin = 10
if(result$network$response == "multinomial"){
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)[,,i]
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)[,,i]
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)[,,i]
} else{
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)
}
lower <- lower[upper.tri(lower)]
OR <- OR[upper.tri(OR)]
upper <- upper[upper.tri(upper)]
odds <- data.frame(lower = lower, OR = OR, upper = upper)
if(result$network$response %in% c("binomial", "multinomial")){
odds <- exp(odds) #report odds ratio instead of log odds ratio
}
Treat.order <- result$network$Treat.order
ts <- 1:length(Treat.order)
comps <- combn(ts, 2)
name <- rep(NA, ncol(comps))
for(j in 1:ncol(comps)){
name[j] <- paste0(Treat.order[comps[2,j]]," vs ", Treat.order[comps[1,j]])
}
odds$name <- name
if(is.null(ticks.position)){
if(result$network$response %in% c("binomial", "multinomial")){
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
} else if(result$network$response == "normal"){
ticks <- pretty(c(min(odds$lower, na.rm =TRUE), max(odds$upper, na.rm = TRUE)))
}
} else{
ticks <- ticks.position
}
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
install.packages('ggplot)')
install.packages('ggplot')
library(ggplot2)
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
xlim.range <- ggplot_build(p)$layout$panel_ranges[[1]]$x.range
p <- p + geom_text(aes(label = paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]")), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = 1:length(comps[1,]))   # hjust = -1, vjust = 2)
median_name_location <- ifelse(length(odds[,1]) <= 3, length(comps[1,]) + 0.5, length(comps[1,]) + 1)
p <- p + geom_text(aes(label = "Median [lower, upper]"), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = median_name_location)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid::grid.draw(gt)
gt <- ggplot_gtable(ggplot_build(p))
p <- p + geom_text(aes(label = "Median [lower, upper]"), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = median_name_location)
p
if(i != 1) grid::grid.newpage()
if(result$network$response == "multinomial"){
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)[,,i]
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)[,,i]
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)[,,i]
} else{
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)
}
lower <- lower[upper.tri(lower)]
OR <- OR[upper.tri(OR)]
upper <- upper[upper.tri(upper)]
odds <- data.frame(lower = lower, OR = OR, upper = upper)
if(result$network$response %in% c("binomial", "multinomial")){
odds <- exp(odds) #report odds ratio instead of log odds ratio
}
Treat.order <- result$network$Treat.order
ts <- 1:length(Treat.order)
comps <- combn(ts, 2)
name <- rep(NA, ncol(comps))
for(j in 1:ncol(comps)){
name[j] <- paste0(Treat.order[comps[2,j]]," vs ", Treat.order[comps[1,j]])
}
odds$name <- name
if(is.null(ticks.position)){
if(result$network$response %in% c("binomial", "multinomial")){
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
} else if(result$network$response == "normal"){
ticks <- pretty(c(min(odds$lower, na.rm =TRUE), max(odds$upper, na.rm = TRUE)))
}
} else{
ticks <- ticks.position
}
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
xlim.range <- ggplot_build(p)$layout$panel_ranges[[1]]$x.range
p <- p + geom_text(aes(label = paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]")), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = 1:length(comps[1,]))   # hjust = -1, vjust = 2)
median_name_location <- ifelse(length(odds[,1]) <= 3, length(comps[1,]) + 0.5, length(comps[1,]) + 1)
p <- p + geom_text(aes(label = "Median [lower, upper]"), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = median_name_location)
p
if(i != 1) grid::grid.newpage()
if(result$network$response == "multinomial"){
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)[,,i]
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)[,,i]
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)[,,i]
} else{
lower <- relative.effects.table(result, summary_stat = "quantile", probs = (1- level)/2)
OR <- relative.effects.table(result, summary_stat = "quantile", probs = 0.5)
upper <- relative.effects.table(result, summary_stat = "quantile", probs = level + (1- level)/2)
}
lower <- lower[upper.tri(lower)]
OR <- OR[upper.tri(OR)]
upper <- upper[upper.tri(upper)]
odds <- data.frame(lower = lower, OR = OR, upper = upper)
if(result$network$response %in% c("binomial", "multinomial")){
odds <- exp(odds) #report odds ratio instead of log odds ratio
}
Treat.order <- result$network$Treat.order
ts <- 1:length(Treat.order)
comps <- combn(ts, 2)
name <- rep(NA, ncol(comps))
for(j in 1:ncol(comps)){
name[j] <- paste0(Treat.order[comps[2,j]]," vs ", Treat.order[comps[1,j]])
}
odds$name <- name
if(is.null(ticks.position)){
if(result$network$response %in% c("binomial", "multinomial")){
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
} else if(result$network$response == "normal"){
ticks <- pretty(c(min(odds$lower, na.rm =TRUE), max(odds$upper, na.rm = TRUE)))
}
} else{
ticks <- ticks.position
}
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
p
xlim.range <- ggplot_build(p)$layout$panel_ranges[[1]]$x.range
p <- p + geom_text(aes(label = paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]")), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = 1:length(comps[1,]))   # hjust = -1, vjust = 2)
p
paste0(sprintf("%0.2f", round(OR, digits = 2))
paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]"))
paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]")
aes(label = paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]"))
xlim.range[2] + diff(xlim.range)*label.multiplier
xlim.range <- ggplot_build(p)$layout$panel_ranges[[1]]$x.range
xlim.range <- ggplot_build(p)$layout$panel_ranges[[1]]$x.range
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
p
ggplot_build(p)
ggplot_build(p)$panel_range
ggplot_build(p)
str(ggplot_build(p))
diff(xlim.range)*label.multiplier
1:length(comps[1,])
median_name_location <- ifelse(length(odds[,1]) <= 3, length(comps[1,]) + 0.5, length(comps[1,]) + 1)
p <- p + geom_text(aes(label = "Median [lower, upper]"), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = median_name_location)
p
gt <- ggplot_gtable(ggplot_build(p))
p <- ggplot(odds, aes(y = OR, x = name)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_x_discrete(limits = name) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
theme_bw() +
theme(plot.margin = unit(c(1,label.margin,1,1), "lines"))
if(result$network$response %in% c("binomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = "Network Meta-analysis Forest plot") +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("multinomial")){
p <- p + labs(x = "Treatment comparison", y = "Odds Ratio", title = paste0("Network Meta-analysis Forest plot", ": Multinomial Category ", (i+1), " vs 1")) +
scale_y_log10(breaks = ticks, labels = ticks)
} else if(result$network$response %in% c("normal")){
p <- p + labs(x = "Treatment comparison", y = "Continuous Scale", title = "Network Meta-analysis Forest plot") +
scale_y_continuous(breaks = ticks, labels = ticks)
}
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid::grid.draw(gt)
xlim.range <-  ggplot_build(p)$panel$ranges[[1]]$x.range
xlim.range
p
ggplot_build(p)
ggplot_build(p)$panel$ranges[[1]]
ggplot_build(p)$layout$panel_scales_x[[1]]$range$range
ggplot_build(p)$layout$panel_ranges[[1]]$x.range
ggplot_build(p)$layout$panel_params[[1]]$x.range
xlim.range <- ggplot_build(p)$layout$panel_params[[1]]$x.range
p <- p + geom_text(aes(label = paste0(sprintf("%0.2f", round(OR, digits = 2)), " [", sprintf("%0.2f", round(lower, digits = 2)) , ", ", sprintf("%0.2f", round(upper, digits = 2)), "]")), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = 1:length(comps[1,]))   # hjust = -1, vjust = 2)
median_name_location <- ifelse(length(odds[,1]) <= 3, length(comps[1,]) + 0.5, length(comps[1,]) + 1)
p <- p + geom_text(aes(label = "Median [lower, upper]"), y = xlim.range[2] + diff(xlim.range)*label.multiplier, x = median_name_location)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid::grid.draw(gt)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Outcomes <- c(10, 18, 5, 8, 46, 61, 5, 16, 26, 37, 816, 866, 55, 109, 112, 130, 619, 692, 71, 81, 325, 345, 321, 325, 54, 77, 6, 6, 211, 136, 47, 47, 34, 39, 6, 27, 394, 406, 997, 1421)
N <- c(297, 308, 30, 44, 105, 108, 10, 17, 40, 38, 1060, 902, 71, 139, 138, 140, 737, 764, 82, 83, 375, 384, 363, 361, 56, 80, 12, 12, 211, 136, 56, 58, 38, 41, 50, 47, 469, 482, 1545, 1583)
Treat <- c(1, 2, 1, 5, 1, 3, 1, 4, 1, 4, 1, 7, 1, 2, 1, 7, 1, 5, 1, 3, 1, 2, 1, 4, 1, 2, 4, 6, 4, 6, 3, 4, 2, 3, 2, 5, 4, 6, 4, 7)
#Treat[Treat == 1] = "Treatment A"
#Treat[Treat == 2] = "Treatment B"
#Treat[Treat == 3] = "Hahaha Treatment"
#Treat[Treat == 4] = "Blah Blah Treatment"
Study <- rep(1:20, each = 2)
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial") #Model 0
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common") #Model A1
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common", baseline.risk = "exchangeable") #Model A2
#doesn't converge
#network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "exchangeable") #Model B1
#network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "exchangeable", baseline.risk = "exchangeable") #Model B2
result <- network.run(network)
summary(result, extra.pars = "delta")
network.forest.plot(result)
