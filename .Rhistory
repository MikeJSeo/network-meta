totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
totresdev
Dbar <- mean(unlist(totresdev))
Dbar
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev_study <- apply(resdev, 2, mean)
resdev_study
cat(network$code)
#devtilda - deviance at the posterior mean of the fitted values
ybar <- lapply(samples, function(x){ x[,grep("delta\\[", dimnames(samples[[1]])[[2]])] })
ybar
cat(network$code)
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda
cat(network$code)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
summary(result)
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
#posterior mean of residual deviance
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev_study <- apply(resdev, 2, mean)
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
rtilda_arm
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
devtilda_arm
calculate.network.deviance(result)
calculate.deviance(result)
result$network$dic = TRUE
calculate.deviance(result)
network$r
calculate.deviance()
calculate.deviance
calculate.deviance(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
network$dic
str(network)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
cat(network$code)
str(network)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
network$dic
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
calculate.deviance(result)
str(result)
devtools::document()
setwd("C:/Users/mike/Desktop/Github/network-meta")
devtools::document()
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
summary(result)
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network)
summary(result)
result$samples
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network, n.run = 100000)
summary(result)
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network, n.run = 100000)
summary(result)
calculate.deviance
cat(network$code)
cat(network$prior)
cat(network$prior.data)
network$prior.data
network <- result$network
samples <- result$samples
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda
rtilda
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda
rtilda <- apply(rtilda, 2, mean)
rtilda
calculate.deviance(result)
devtilda_arm
dev_arm
sum(devtilda_arm, na.rm = TRUE)
Dbar - sum(devtilda_arm, na.rm = TRUE)
calculate.deviance(result)
###### find residual deviance by arm
if(network$response == "multinomial" & !is.null(network$miss.matrix)){
dev <- list()
for(ii in seq(network$npattern)){
dev_each <- lapply(samples, function(x) { x[,grep(paste0("dev", ii, "\\["), dimnames(samples[[1]])[[2]])]})
dev_each <- do.call(rbind, dev_each)
dev_each <- apply(dev_each, 2, mean)
n_value <- network[[paste0("n", ii)]]
dev_matrix <- matrix(NA, nrow = dim(n_value)[1], ncol = dim(n_value)[2])
for(i in 1:dim(dev_matrix)[1]){
for(j in 1:dim(dev_matrix)[2]){
ind <- which(paste0("dev", ii, "[", i, ",", j, "]") == names(dev_each))
if(length(ind) != 0){
dev_matrix[i,j] <- dev_each[ind]
}
}
}
dev[[paste0("dev", ii)]] <- dev_matrix
}
dev_arm <- do.call(rbind, dev)
} else{
dev <- lapply(samples, function(x) { x[,grep("dev\\[", dimnames(samples[[1]])[[2]])]})
dev <- do.call(rbind, dev)
dev <- apply(dev, 2, mean)
dev_matrix <- matrix(NA, nrow =  network$nstudy, ncol = max(network$na))
for(i in 1:dim(dev_matrix)[1]){
for(j in 1:dim(dev_matrix)[2]){
ind <- which(paste("dev[", i, ",", j, "]", sep = "") == names(dev))
if(length(ind) != 0){
dev_matrix[i,j] <- dev[ind]
}
}
}
dev_arm <- dev_matrix
}
dev_arm
Dbar
sum(dev_arm, na.rm = TRUE)
Dbar - sum(devtilda_arm, na.rm = TRUE)
cat(network$code)
dev <- lapply(samples, function(x) { x[,grep("dev\\[", dimnames(samples[[1]])[[2]])]})
dev <- do.call(rbind, dev)
dev <- apply(dev, 2, mean)
dev
mean(dev)
sum(dev)
Dbar
dev <- lapply(samples, function(x) { x[,grep("dev\\[", dimnames(samples[[1]])[[2]])]})
dev
dev <- do.call(rbind, dev)
dev
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
totresdev
cat(netsum(dev_arm))
sum(dev_arm)
sum(dev_arm, na.rm = TRUE)
Dbar
cat(network$code)
pD <- Dbar - sum(devtila_arm, na.rm = TRUE)
DIC <- Dbar + pD
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network, n.run = 100000)
summary(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
calculate.deviance
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network, n.run = 100000)
sum(dev_arm, na.rm = TRUE)
Dbar
Dbar - sum(devtilda_arm, na.rm = TRUE)
sum(leverage_arm, na.rm = TRUE)
leverage_arm <- dev_arm - devtilda_arm
sum(leverage_arm, na.rm = TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
calculate.deviance
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network, n.run = 100000)
summary(result)
Dbar - sum(devtilda_arm, na.rm = TRUE)
result$deviance
Dbar
result$devtil_arm
sum(result$devtilda_arm,na.rm = TRUE)
sum(result$devtilda_arm, na.rm = TRUE)
sum(result$deviance$devtilda_arm, na.rm = TRUE)
sum(devtilda_arm, na.rm = TRUE)
devtilda_arm
aa <- devtilda_arm
network <- result$network
samples <- result$samples
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
sum(devtilda_arm, na.rm = TRUE)
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network, n.run = 100000)
summary(result)
sum(result$deviance$devtilda_arm, na.rm = TRUE)
result$deviance$Dbar
sum(result$deviance$dev_arm, na.rm = TRUE)
sum(devtilda_arm, na.rm = TRUE)
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
sum(devtilda_arm, na.rm = TRUE)
calculate.deviance(result)
network <- with(thrombolytic, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- network.run(network)
summary(result)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- ume.network.run(network)
summary(result)
calculate.deviance
set.seed(2)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- ume.network.run(network)
summary(result)
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
rtilda
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
n_value
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
devtilda_arm
sum(devtilda_arm, na.rm = TRUE)
Dbar - sum(devtilda_arm, na.rm = TRUE)
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
###### find residual deviance by arm
if(network$response == "multinomial" & !is.null(network$miss.matrix)){
dev <- list()
for(ii in seq(network$npattern)){
dev_each <- lapply(samples, function(x) { x[,grep(paste0("dev", ii, "\\["), dimnames(samples[[1]])[[2]])]})
dev_each <- do.call(rbind, dev_each)
dev_each <- apply(dev_each, 2, mean)
n_value <- network[[paste0("n", ii)]]
dev_matrix <- matrix(NA, nrow = dim(n_value)[1], ncol = dim(n_value)[2])
for(i in 1:dim(dev_matrix)[1]){
for(j in 1:dim(dev_matrix)[2]){
ind <- which(paste0("dev", ii, "[", i, ",", j, "]") == names(dev_each))
if(length(ind) != 0){
dev_matrix[i,j] <- dev_each[ind]
}
}
}
dev[[paste0("dev", ii)]] <- dev_matrix
}
dev_arm <- do.call(rbind, dev)
} else{
dev <- lapply(samples, function(x) { x[,grep("dev\\[", dimnames(samples[[1]])[[2]])]})
dev <- do.call(rbind, dev)
dev <- apply(dev, 2, mean)
dev_matrix <- matrix(NA, nrow =  network$nstudy, ncol = max(network$na))
for(i in 1:dim(dev_matrix)[1]){
for(j in 1:dim(dev_matrix)[2]){
ind <- which(paste("dev[", i, ",", j, "]", sep = "") == names(dev))
if(length(ind) != 0){
dev_matrix[i,j] <- dev[ind]
}
}
}
dev_arm <- dev_matrix
}
############find leverage
if(network$response == "binomial"){
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
n_value <- network$n[i,j]
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
devtilda_arm[i,j] <- ifelse(r_value != 0, 2 * r_value * (log(r_value)-log(rtilda_arm[i,j])), 0)
devtilda_arm[i,j] <- devtilda_arm[i,j] + ifelse((n_value - r_value) != 0, 2 * (n_value-r_value) *(log(n_value-r_value) - log(n_value- rtilda_arm[i,j])), 0)
}
}
} else if(network$response == "normal"){
ybar <- lapply(samples, function(x){ x[,grep("theta\\[", dimnames(samples[[1]])[[2]])] })
ybar <- do.call(rbind, ybar)
ybar <- apply(ybar, 2, mean)
ybar_arm <- devtilda_arm <- matrix(NA, nrow = network$nstudy, ncol = max(network$na))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
r_value <- network$r[i,j]
se_value <- network$se[i,j]
ybar_arm[i,j] <- ybar[which(paste("theta[", i, ",", j, "]", sep = "") == names(ybar))]
devtilda_arm[i,j] <- ifelse(se_value != 0, (r_value - ybar_arm[i,j])^2 / se_value^2, 0)
}
}
} else if(network$response == "multinomial"){
if(is.null(network$miss.matrix)){ #complete dataset
rtilda <- lapply(samples, function(x){ x[,grep("rhat\\[", dimnames(samples[[1]])[[2]])]})
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
rtilda_arm <- devtilda_category <- array(NA, dim = c(network$nstudy, max(network$na), network$ncat))
for(i in 1:network$nstudy){
for(j in 1:network$na[i]){
for(k in 1:network$ncat){
r_value <- network$r[i,j,k]
rtilda_arm[i,j,k] <- rtilda[which(paste("rhat[", i, ",", j, ",", k, "]", sep = "") == names(rtilda))]
devtilda_category[i,j,k] <- ifelse(r_value != 0,  2 * r_value * log(r_value/rtilda_arm[i,j,k]), 0)
}
}
}
devtilda_arm <- apply(devtilda_category, 1:2, sum)
} else{ #incomplete datacase
devtilda_value <- rtilda_arm <- list()
for(ii in seq(network$npattern)){
r_values <- network[[paste0("r",ii)]]
devtilda_category <- rtilda_matrix <- array(NA, dim = dim(r_values))
rtilda <- lapply(samples, function(x){ x[,grep(paste0("rhat", ii, "\\["), dimnames(samples[[1]])[[2]])] })
rtilda <- do.call(rbind, rtilda)
rtilda <- apply(rtilda, 2, mean)
for(i in 1:dim(r_values)[1]){
for(j in 1:dim(r_values)[2]){
for(k in 1:dim(r_values)[3]){
found <- which(paste("rhat", ii, "[", i, ",", j, ",", k, "]", sep = "") == names(rtilda))
r_value <- r_values[i,j,k]
if(!is.na(r_value) & length(found) != 0){
rtilda_matrix [i,j,k] <- rtilda[found]
devtilda_category[i,j,k] <- ifelse(r_value != 0,  2 * r_value * log(r_value/rtilda_matrix[i,j,k]), 0)
}
}
}
}
devtilda_matrix <- apply(devtilda_category, 1:2, sum)
rtilda_arm[[ii]] <- rtilda_matrix
devtilda_value[[ii]] <- devtilda_matrix
}
devtilda_arm <- do.call(rbind, devtilda_value)
}
}
dev_arm - devtilda_arm
leverage_arm <- dev_arm - devtilda_arm
sum(leverage_arm, na.rm = TRUE)
Dbar - sum(devtilda_arm, na.rm = TRUE)
rtilda_arm[i,j] <- rtilda[which(paste("rhat[", i, ",", j, "]", sep = "") == names(rtilda))]
rtilda_arm
r_value
r_value <- network$r[i,j]
n_value <- network$n[i,j]
network$r
network$n
rtilda
