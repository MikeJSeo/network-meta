setwd("C:/Users/ms19g661/Desktop")
#dir.create("node13")
#dir.create("node14")
#dir.create("node23")
#dir.create("node24")
#dir.create("node34")
#
###########################################################################
# load data for MTC
MTCData <- read.table("HassData.txt", header=TRUE)
#dir.create("node13")
#dir.create("node14")
#dir.create("node23")
#dir.create("node24")
#dir.create("node34")
#
###########################################################################
# load data for MTC
MTCData <- read.table("HassData.txt", header=TRUE)
r <- data.matrix(MTCData[,c("r1", "r2", "r3")])
n <- data.matrix(MTCData[,c("n1", "n2", "n3")])
t <- data.matrix(MTCData[,c("t1", "t2", "t3")])
r
n
smoking
library(mcnet)
devtools::install_github("MikeJSeo/network-meta")
install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta")
smoking
library(mcnet)
smoking
help(array)
a <- array(1:100000, c(10, 10, 1000))
a
a <- array(1:100000, c(10, 10, 1000))
for(i in 1:1000){
a[,11,i] = rep(NA, 10)
}
for(i in 1:1000){
a[,,i] = cbind(a[,,i], rep(NA, 10))
}
a[,,1000]
cbind(a[,,1000], rep(NA, 10)
)
a <- array(1:100000, c(10, 10, 1000))
b <- array(1:100000, c(10, 11, 1000))
for(i in 1:1000){
a[,,i] = cbind(a[,,i], rep(NA, 10))
}
help(aperm)
replace(dim(a), 2, 1)
nodesplit.network.data <- function(Outcomes, Study, Treat,  N = NULL, SE = NULL, response = NULL, type = "random")
if(missing(Study) || missing(Treat) || missing(Outcomes)){
stop("Study, Treat, and Outcomes have to be all specified")
}
if(response == "multinomial" || response == "binomial"){
if(is.null(N)){
stop("If the response is multinomial or binomial, N has to be specified")
}
} else if (response == "normal"){
if(is.null(SE)){
stop("If the response is normal, SE has to be specified")
}
}
if(!type %in% c("fixed", "random")){
stop("type has to be either fixed or random")
}
na <- rle(Study)$lengths
if(any(na == 1)) stop("study cannot have only 1 arm or arms have to be next to each other in each study")
nstudy <- length(unique(Study))
ntreat <- unique(as.vector(Treat))
ntreat <- length(ntreat[!is.na(ntreat)])
Outcomes <- as.matrix(Outcomes)
ends <- cumsum(na) # End row of trials
starts <- c(1, ends[-length(ends)] + 1) # Start row of trials
b.Treat <- rep(NA, length(na))
b.id <- rep(F, sum(na))
for (i in 1:length(na)){
limits <- starts[i]:ends[i]
b.Treat[i] <- min(Treat[limits])
b.id[limits[b.Treat[i] == Treat[limits]]] <- T
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
network <- list(Outcomes = Outcomes, Study = Study, Treat = Treat, r = r, t = t, type = type, rank.preference = NULL, nstudy = nstudy, na = na, ntreat = ntreat, b.id = b.id, response = response, hy.prior = hy.prior)
if(response == "binomial" || response == "multinomial"){
network$N = N
network$n = n
} else if (response == "normal"){
network$SE = SE
network$se = se
}
#code <- nodesplit.network.rjags(network)
#network$code <- code
class(network) <- "nodesplit.network.data"
return(network)
}
devtools::install_github("MikeJSeo/network-meta")
devtools::document()
setwd("~/GitHub/network-meta")
devtools::document()
devtools::document()
install.packages("rjags")
install.packages("rjags")
library(mcnet)
smoking
nodesplit.network.data(smoking$Outcomes, smoking$Study, smoking$Treat,  N = smoking$N, response = "binary", type = "random"){
nodesplit.network.data(smoking$Outcomes, smoking$Study, smoking$Treat,  N = smoking$N, response = "binary", type = "random")
nodesplit.network.data(smoking$Outcomes, smoking$Study, smoking$Treat,  N = smoking$N, response = "binary", type = "random")
a <- nodesplit.network.data(smoking$Outcomes, smoking$Study, smoking$Treat,  N = smoking$N, response = "binary", type = "random")
a
devtools::install_github("MikeJSeo/network-meta")
library(mcnet)
nodesplit.network.data(smoking$Outcomes, smoking$Study, smoking$Treat,  N = smoking$N, response = "binary", type = "random")
smoking$Outcomes
nodesplit.network.data
