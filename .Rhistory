10 203 7 198 NA NA 1 8 NA 2 # 37
3 58 2 52 NA NA 1 9 NA 2 # 38
3 86 6 89 NA NA 1 9 NA 2 # 39
3 58 2 58 NA NA 1 9 NA 2 # 40
13 182 11 188 NA NA 1 9 NA 2 # 41
2 26 7 54 NA NA 3 8 NA 2 # 42
12 268 16 350 NA NA 3 8 NA 2 # 43
5 210 17 211 NA NA 3 9 NA 2 # 44
3 138 13 147 NA NA 3 9 NA 2 # 45
8 132 4 66 NA NA 2 8 NA 2 # 46
10 164 6 166 NA NA 2 8 NA 2 # 47
6 124 5 121 NA NA 2 8 NA 2 # 48
13 164 10 161 NA NA 2 9 NA 2 # 49
7 93 5 90 NA NA 2 9 NA 2 # 50
'), header = TRUE)
data <- mtc.data.studyrow(data.src, armVars = c('treatment'='t', 'responders' = 'r', 'sampleSize' = 'n'))
data
Outcomes <- data[,3]
N <- data[,4]
Treat <- data[,2]
Study <- data[,1]
thrombolytic <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat)
thrombolytic
library(gemtc)
thromboyltic
thrombolytic
thrombolytic
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
thrombolytic
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
thrombolytic
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, mean.d = 0.01, prec.d = 0.1)
})
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
Outcomes <- thrombolytic$Outcomes
Study <- thrombolytic$Study
Treat <- thrombolytic$Treat
N <- thrombolytic$N
na <- rle(Study)$lengths
if(any(na == 1)) stop("study cannot have only 1 arm or arms have to be next to each other in each study")
nstudy <- length(unique(Study))
ntreat <- unique(as.vector(Treat))
ntreat <- length(ntreat[!is.na(ntreat)])
ends <- cumsum(na) # End row of trials
starts <- c(1, ends[-length(ends)] + 1) # Start row of trials
b.Treat <- rep(NA, length(na))
b.id <- rep(F, sum(na))
for (i in 1:length(na)){
limits <- starts[i]:ends[i]
b.Treat[i] <- min(Treat[limits])
b.id[limits[b.Treat[i] == Treat[limits]]] <- T
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
make.byStudy.Outcome = function(Outcomes, Study, nstudy, na){
r = structure(.Data = rep(NA, nstudy*max(na)* dim(Outcomes)[2]), .Dim = c(nstudy, max(na), dim(Outcomes)[2]))
arms_index = NULL
for(i in 1:length(na)){
arms_index = c(arms_index, seq(na[i]))
}
for(i in 1:dim(Outcomes)[1]){
r[Study[i],arms_index[i],] = Outcomes[i,]
}
return(r)
}
make.byStudy.matrix = function(Treat, Study){
#make the by-arms vector into a by-study matrix
nstudy = length(unique(Study))
na = rle(Study)$lengths
Study = rep(1:nstudy, times = na)
t = matrix(NA, nrow = nstudy, ncol = max(na))
arms_index = NULL
for(i in 1:length(na)){
arms_index = c(arms_index, seq(na[i]))
}
for(i in 1:length(Treat)){
t[Study[i], arms_index[i]] = Treat[i]
}
return(t)
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
response = "binomial"
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
# make r, t, se(or n) that has dimensions suitable for rjags coding.
t <- make.byStudy.matrix(Treat, Study)
if(response == "binomial" || response == "multinomial"){
n <- make.byStudy.matrix(N, Study)
} else if(response == "normal"){
se <- make.byStudy.matrix(SE, Study)
}
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
Outcomes
Study
nstudy
na
length(na)
make.byStudy.Outcome()
make.byStudy.Outcome
Outcomes
Outcomes <- as.matrix(Outcomes)
r <- make.byStudy.Outcome(Outcomes, Study, nstudy, na)
if(response != "multinomial"){
r <- r[,,1]
}
r
Outcomes
make.byStudy.Outcome
source('C:/Users/mike/Desktop/Github/network-meta/R/ume.network.R', echo=TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
source('C:/Users/mike/Desktop/diff_data_trial2.R', echo=TRUE)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network$na
network$n
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network$Outcomes
thrombolytic$Outcomes
network$r
network$r
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
network
cat(network$code)
str(network)
network$r
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", mean.d = 0.01, prec.d = 0.1)
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
parkinsons_contrast
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Outcomes <- c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, -0.9)
Treat <- c(1, 3, 1, 2, 3, 4, 3, 4, 4, 5, 4, 5, 1, 2, 4)
SE <- c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, 0.69)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
na
nstudy <- length(na)
mat <- matrix(NA, nstudy, max(na))
Study <- rep(1:nstudy, na)
arms_index <- NULL
for(i in 1:length(na)){
arms_index <- c(arms_index, seq(na[i]))
}
arms_index
for(i in 1:length(vec)){
mat[Study[i], arms_index[i]] <- vec[i]
}
mat
install.packages("samr")
install.packages("samr")
library(installr)
updateR()
install.packages(installr)
install.packages("installr")
updateR()
updateR()
librarY(installr)
library(installr)
updateR()
install.packages("samr")
install.packages("samr")
install.packages("samr")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")\
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
install.packages("samr")
setRepositories()
install.packages("samr")
install.packages("devtools")
install.packages("samr")
ap <- available.packages()
"samr" %in% rownames(ap)
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
install.packages("samr")
biocLite("samr")
biocLite("samr")
biocLite("samr")
source("http://bioconductor.org/biocLite.R")
biocLite("affy")
biocLite("samr")
library(affy)
library(samr)
install.packages("samr")
if (! ("devtools" %in% installed.packages()) ) install.packages("devtools")
install_github("bnaras/samr")
runSAM()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
summary(result$samples)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
summary(result)
summary(result$samples)
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dgamma", 0.1, 0.1))
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dgamma", 0.1, 0.1))
})
result <- ume.network.run(network)
cat(network$code)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
str(network)
network$na
setwd("C:/Users/mike/Desktop/Github/network-meta")
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
summary(result)
plot(result)
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
plot(result)
network <- with(thrombolytic, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- network.run(network)
summary(result)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed")
})
result <- ume.network.run(network)
summary(result)
thrombolytic
length(thrombolytic$Outcomes)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed", mean.d = 0.001)
})
cat(network$code)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed", mean.d = 0.001, prec.d = 0.01)
})
cat(network$code)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed", mean.d = 0.01)
})
result <- ume.network.run(network)
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", hy.prior = list("dhnorm", 0, 0.3))
})
result <- ume.network.run(network)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed", mean.d = 0.01)
})
result <- ume.network.run(network)
summary(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
summary(result)
network <- with(thrombolytic, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "fixed", mean.d = 0.01)
})
result <- ume.network.run(network)
summary(result)
