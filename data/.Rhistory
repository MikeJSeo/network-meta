study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
random.noninf.unif = contrast.network.data(Outcomes = matrix(alzheimers.yi,ncol=1),Treat = alzheimers.treat,
SE=matrix(alzheimers.si,ncol=1),na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.results(random.noninf.unif)
alzheimers.treat
Treat = matrix(alzheimers.treat, ncol = 2)
random.noninf.unif = contrast.network.data(Outcomes = matrix(alzheimers.yi,ncol=1),Treat = matrix(alzheimers.treat, ncol = 2),
SE=matrix(alzheimers.si,ncol=1),na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.results(random.noninf.unif)
library(mcnet)
library(metafor)
random.noninf.unif = contrast.network.data(Outcomes = matrix(alzheimers.yi,ncol=1),Treat = matrix(alzheimers.treat, ncol = 2),
SE=matrix(alzheimers.si,ncol=1),na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.results(random.noninf.unif)
result <- contrast.network.run(network)
result <- contrast.network.run(random.noninf.unif)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2),
SE=matrix(alzheimers.si,ncol=1),na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.noninf.unif
help(contrast.network.data)
matrix(alzheimers.treat, ncol = 2)
alzheimers.treat
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat,
SE=matrix(alzheimers.si,ncol=1),na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.noninf.unif
random.results(random.noninf.unif)
help(matrix)
matrix(alzheimers.treat, ncol = 2, byrow = TRUE)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE=matrix(alzheimers.si,ncol=1),na=rep(2,5), V=rep(NA,5),type = "random", mean.d = 0, prec.d = 1e-4,
hy.prior = list("dunif",0,100))
random.results(random.noninf.unif)
help(contrast.network.data)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byRow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
random.results(random.noninf.unif)
contrast.network.run(random.noninf.unif)
V
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byRow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
contrast.network.run(random.noninf.unif)
cat(network$code)
cat(network$code)
cat(random.noninf.unif$code)
random.noninf.unif
V
random.noninf.unif
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byRow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
help(matrix)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
contrast.network.run(random.noninf.unif)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
contrast.network.run(random.noninf.unif)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = contrast.network.run(random.noninf.unif)
summary(result$samples)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = contrast.network.run(random.noninf.unif)
remove(list = ls())
install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
alz.remodel <- rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="REML",digits=3, slab=seq(5))
alz.remodel
predict(alz.remodel)
par.limits = function(x)
{
quantile(x,c(.025,.5,.975)
}
post.prob = function(x)
{
sum(x<0)/length(x)
}
random.results=function(network)
{
result = contrast.network.run(network, extra.pars.save="delta")
samples = rbind(result$samples[[1]],result$samples[[2]],result$samples[[3]])
mcmc.samples=mcmc(samples)
delta.names = paste("delta[",seq(5),",2]",sep="")
delta = samples[,delta.names]
dimnames(delta) = list(NULL, seq(5))
#Population treatment effect
d = samples[,"d[2]"]
d.quantiles = par.limits(d)
print(round(d.quantiles,1))
print(post.prob(d))
#  print(summary(d))
print(result$deviance)
study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
install.packages("devtools")
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
contrast.network.run(random.noninf.unif)
#random.results(random.noninf.unif)
install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
alzheimers.mat
help(rma)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = contrast.network.run(random.noninf.unif)
reuslt
result
random.result(random.noninf.unif)
#install.packages("devtools")
#devtools::install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
alz.remodel <- rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="REML",digits=3, slab=seq(5))
alz.remodel
predict(alz.remodel)
par.limits = function(x)
{
quantile(x,c(.025,.5,.975)
}
post.prob = function(x)
{
sum(x<0)/length(x)
}
random.results=function(network)
{
result = contrast.network.run(network, extra.pars.save="delta")
samples = rbind(result$samples[[1]],result$samples[[2]],result$samples[[3]])
mcmc.samples=mcmc(samples)
delta.names = paste("delta[",seq(5),",2]",sep="")
delta = samples[,delta.names]
dimnames(delta) = list(NULL, seq(5))
#Population treatment effect
d = samples[,"d[2]"]
d.quantiles = par.limits(d)
print(round(d.quantiles,1))
print(post.prob(d))
#  print(summary(d))
print(result$deviance)
study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
#result = contrast.network.run(random.noninf.unif)
random.result(random.noninf.unif)
#install.packages("devtools")
#devtools::install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
alz.remodel <- rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="REML",digits=3, slab=seq(5))
alz.remodel
predict(alz.remodel)
par.limits = function(x)
{
quantile(x,c(.025,.5,.975)
}
post.prob = function(x)
{
sum(x<0)/length(x)
}
random.results=function(network)
{
result = contrast.network.run(network, extra.pars.save="delta")
samples = rbind(result$samples[[1]],result$samples[[2]],result$samples[[3]])
mcmc.samples=mcmc(samples)
delta.names = paste("delta[",seq(5),",2]",sep="")
delta = samples[,delta.names]
dimnames(delta) = list(NULL, seq(5))
#Population treatment effect
d = samples[,"d[2]"]
d.quantiles = par.limits(d)
print(round(d.quantiles,1))
print(post.prob(d))
#  print(summary(d))
print(result$deviance)
study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
#result = contrast.network.run(random.noninf.unif)
random.results(random.noninf.unif)
cat(random.noninf.unif)
cat(random.noninf.unif$cpde)
cat(random.noninf.unif$code)
#install.packages("devtools")
devtools::install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
library(metafor)
alzheimers.mat=read.csv("C:/Users/mike/Desktop/alzheimers.csv")
alzheimers.study = rep(seq(5),each=2)
alzheimers.treat = rep(seq(2),times=5)
alzheimers.n = as.vector(t(alzheimers.mat[,c(5,2)]))
alzheimers.mean = as.vector(t(alzheimers.mat[,c(6,3)]))
alzheimers.sd = as.vector(t(alzheimers.mat[,c(7,4)]))
alzheimers.se = alzheimers.sd/sqrt(alzheimers.n)
#alzheimers.yi = alzheimers.mat[,8]
#alzheimers.vi = alzheimers.mat[,9]
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
prior.mean = c(0,0,0,-5)
prior.sd = c(20,100,1,2)
c1 = sum(1/alzheimers.vi)
ybar.ce = sum(alzheimers.yi/alzheimers.vi)/c1
c0 = 1/prior.sd^2
post.var = 1/(c0+c1)
post.mean = (c1*ybar.ce+c0*prior.mean)/(c1+c0)
post.se = sqrt(post.var)
post.ci.lb = post.mean -1.96*post.se
post.ci.ub = post.mean +1.96*post.se
post.mean
post.se
post.ci.lb
post.ci.ub
pnorm(-post.mean/post.se)
pnorm((-5-post.mean)/post.se)
alz.cemodel = rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="FE", digits=3, slab=seq(5))
alz.cemodel
predict(alz.cemodel)
alz.remodel <- rma(measure="GEN", yi=alzheimers.yi, vi=alzheimers.vi, method="REML",digits=3, slab=seq(5))
alz.remodel
predict(alz.remodel)
par.limits = function(x)
{
quantile(x,c(.025,.5,.975)
}
post.prob = function(x)
{
sum(x<0)/length(x)
}
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = contrast.network.run(network, extra.pars.save="delta")
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = contrast.network.run(random.noninf.unif)
random.results(random.noninf.unif)
random.results=function(network)
{
result = contrast.network.run(network)
samples = rbind(result$samples[[1]],result$samples[[2]],result$samples[[3]])
mcmc.samples=mcmc(samples)
delta.names = paste("delta[",seq(5),",2]",sep="")
delta = samples[,delta.names]
dimnames(delta) = list(NULL, seq(5))
#Population treatment effect
d = samples[,"d[2]"]
d.quantiles = par.limits(d)
print(round(d.quantiles,1))
print(post.prob(d))
#  print(summary(d))
print(result$deviance)
study.effects = t(apply(delta,2,par.limits))  #Study effect intervals
study.probs = apply(delta,2,post.prob) #Study effect posterior probabilities
print(round(cbind(study.effects[,c(2,1,3)],study.probs),3))
print(summary(mcmc.samples))
}
random.noninf.unif = contrast.network.data(Outcomes = alzheimers.yi,Treat = matrix(alzheimers.treat, ncol = 2, byrow = TRUE),
SE= alzheimers.si, na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result = contrast.network.run(random.noninf.unif)
random.results(random.noninf.unif)
help(mcmc)
str(result)
result$samples
str(result$samples)
alzheimers.yi
parkinsons_contrast
Outcomes <- c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, -0.9)
Treat <- c(1, 3, 1, 2, 3, 4, 3, 4, 4, 5, 4, 5, 1, 2, 4)
SE <- c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, 0.69)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
contrast.make.matrix <- function(vec, na){
nstudy <- length(na)
mat <- matrix(NA, nstudy, max(na))
Study <- rep(1:nstudy, na)
arms_index <- NULL
for(i in 1:length(na)){
arms_index <- c(arms_index, seq(na[i]))
}
for(i in 1:lenth(Treat)){
mat[Study[i], arms_index[i]] <- vec[i]
}
}
contrsat.make.matrix(Outcomes, na -1)
contrast.make.matrix(Outcomes, na -1)
contrast.make.matrix <- function(vec, na){
nstudy <- length(na)
mat <- matrix(NA, nstudy, max(na))
Study <- rep(1:nstudy, na)
arms_index <- NULL
for(i in 1:length(na)){
arms_index <- c(arms_index, seq(na[i]))
}
for(i in 1:length(Treat)){
mat[Study[i], arms_index[i]] <- vec[i]
}
}
contrast.make.matrix(Outcomes, na -1)
contrast.make.matrix <- function(vec, na){
nstudy <- length(na)
mat <- matrix(NA, nstudy, max(na))
Study <- rep(1:nstudy, na)
arms_index <- NULL
for(i in 1:length(na)){
arms_index <- c(arms_index, seq(na[i]))
}
for(i in 1:length(Treat)){
mat[Study[i], arms_index[i]] <- vec[i]
}
mat
}
contrast.make.matrix(Outcomes, na -1)
contrast.make.matrix(SE, na -1)
contrast.make.matrix(Treat, na)
Outcomes <- c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, -0.9)
Treat <- c(1, 3, 1, 2, 3, 4, 3, 4, 4, 5, 4, 5, 1, 2, 4)
SE <- c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, 0.69)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
devtools::use_data(parkinsons_contrast, mcnet)
setwd("C:/Users/mike/Desktop/Github/network-meta")
Outcomes <- c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, -0.9)
Treat <- c(1, 3, 1, 2, 3, 4, 3, 4, 4, 5, 4, 5, 1, 2, 4)
SE <- c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, 0.69)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
devtools::use_data(parkinsons_contrast, mcnet)
devtools::use_data(parkinsons_contrast, network-meta)
Outcomes <- c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, -0.9)
Treat <- c(1, 3, 1, 2, 3, 4, 3, 4, 4, 5, 4, 5, 1, 2, 4)
SE <- c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, 0.69)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
devtools::use_data(parkinsons_contrast, mcnet)
devtools::use_data(parkinsons_contrast, mcnet, overwrite = TRUE)
devtools::use_data(parkinsons_contrast, mcnet , overwrite = TRUE)
setwd("C:/Users/mike/Desktop/Github")
devtools::use_data(parkinsons_contrast, mcnet, overwrite = TRUE)
setwd("C:/Users/mike/Desktop/Github/network-meta/data")
devtools::use_data(parkinsons_contrast, mcnet, overwrite = TRUE)
devtools::use_data(parkinsons_contrast, network-meta, overwrite = TRUE)
parkinsons_contrast
devtools::use_data(parkinsons_contrast, network-meta, overwrite = TRUE)
parkinsons_contrast
setwd("C:/Users/mike/Desktop/Github/network-meta/data")
devtools::use_data(parkinsons_contrast, network-meta, overwrite = TRUE)
devtools::use_data(parkinsons_contrast, mcnet, overwrite = TRUE)
load("C:/Users/mike/Desktop/Github/network-meta/data/parkinsons_contrast.rda")
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
devtools::use_data(parkinsons_contrast, mcnet)
devtools::use_data(parkinsons_contrast, mcnet)
library(mcnet)
devtools::use_data(parkinsons_contrast, mcnet)
devtools::use_data(parkinsons_contrast, mcnet)
devtools::use_data(parkinsons_contrast)
devtools::use_data(parkinsons_contrast)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
