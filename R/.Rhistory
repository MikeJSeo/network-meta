library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
install_github("MikeJSeo/network-meta")
library(mcnet)
install_github("MikeJSeo/network-meta")
library(mcnet)
install_github("MikeJSeo/network-meta")
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta")
library(mcnet)
setwd("C:/Users/mike/Desktop/Github/network-meta/R")
devtools::document()
install.packages("rjags")
library(devtools)
install_github("MikeJSeo/network-meta")
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
contrast.network.data
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
devtools::document()
install.packages("rjags")
library("rjags")
library("rjags")
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
contrast.network.data
alzheimers.study = rep(seq(5),each=2)
#alzheimers.treat = rep(seq(2),times=5)
alzheimers.treat = matrix(rep(seq(2),times=5), ncol = 2, byrow = TRUE)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
x = contrast.network.data(Outcomes = matrix(alzheimers.yi,ncol=1),Treat = alzheimers.treat, SE=matrix(alzheimers.si,ncol=1),na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
contrast.network.run(x)
alzheimers.study = rep(seq(5),each=2)
#alzheimers.treat = rep(seq(2),times=5)
alzheimers.treat = matrix(rep(seq(2),times=5), ncol = 2, byrow = TRUE)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
network <-  contrast.network.data(Outcomes = matrix(alzheimers.yi,ncol=1),Treat = alzheimers.treat, SE=matrix(alzheimers.si,ncol=1),na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
summary(result)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=matrix(alzheimers.si,ncol=1),na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
str(network)
network$Outcomes
network <-  contrast.network.data(Outcomes = matrix(alzheimers.yi,ncol=1),Treat = alzheimers.treat, SE=matrix(alzheimers.si,ncol=1),na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
network$Outcomes
str(network)
network$SE
alzheimers.treat
network$Treat
alzheimers.study = rep(seq(5),each=2)
#alzheimers.treat = rep(seq(2),times=5)
alzheimers.treat = matrix(rep(seq(2),times=5), ncol = 2, byrow = TRUE)
alzheimers.yi = c(-14,1,-7,13,-14)
alzheimers.vi = c(100.08,93.08,17.75,81.43,29.80)
alzheimers.si = sqrt(alzheimers.vi)
matrix(alzheimers.yi,ncol=1)
network <-  contrast.network.data(Outcomes = alzheimers.yi,Treat = alzheimers.treat, SE=alzheimers.si,na=rep(2,5),type = "random", mean.d = 0, prec.d = 1e-4, hy.prior = list("dunif",0,100))
result <- contrast.network.run(network)
summary(result$samples)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
smoking
network <- with(smoking, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network)
result <- network.run(network)
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- network.run(network)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
summary(result)
summary(result$samples)
cat(network$code)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
library(roxygen2)
library(testthat)
devtools::session_info()
install.packages("nmaMCMC")
install.packages("granma")
